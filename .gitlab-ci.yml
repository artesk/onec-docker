default:
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  tags:
    - 1c

stages:
  - build client
  - build vnc
  - build server
  - build ws
  - build jdk
  - build edt
  - build crs
  - build crs-http
  - build client-oscript
  - build client-vnc-vas
  - build runner
  - test
  - release

variables:
  DOCKER_USERNAME: $CI_REGISTRY_IMAGE
  BUILD_ALL: "false"
  #CI_DEBUG_TRACE: "true"

.common_release: &common_release
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
  environment:
    name: release
  when: manual

build:client:
  stage: build client
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/client:$ONEC_VERSION
  script:
    - docker build --build-arg ONEC_USERNAME=$ONEC_USERNAME --build-arg ONEC_PASSWORD=$ONEC_PASSWORD --build-arg ONEC_VERSION=$ONEC_VERSION --target client --pull -t $CONTAINER_TEST_IMAGE -f client/Dockerfile .
    - docker push $CONTAINER_TEST_IMAGE
  rules:
    - if: '$INSTALLER_TYPE == "client"'
    - if: '$BUILD_ALL == "true"'

build:vnc:
  stage: build vnc
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/client-vnc:$ONEC_VERSION
  script:
    - docker build --build-arg ONEC_USERNAME=$ONEC_USERNAME --build-arg ONEC_PASSWORD=$ONEC_PASSWORD --build-arg ONEC_VERSION=$ONEC_VERSION --target client-vnc --pull -t $CONTAINER_TEST_IMAGE -f client/Dockerfile .
    - docker push $CONTAINER_TEST_IMAGE
  rules:
    - if: '$INSTALLER_TYPE == "client"'
    - if: '$INSTALLER_TYPE == "client-vnc"'
    - if: '$BUILD_ALL == "true"'

build:server:
  stage: build server
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/server:$ONEC_VERSION
  script:
    - docker build --build-arg ONEC_USERNAME=$ONEC_USERNAME --build-arg ONEC_PASSWORD=$ONEC_PASSWORD --build-arg ONEC_VERSION=$ONEC_VERSION --pull -t $CONTAINER_TEST_IMAGE -f server/Dockerfile .
    - docker push $CONTAINER_TEST_IMAGE
  rules:
    - if: '$INSTALLER_TYPE == "server"'
    - if: '$BUILD_ALL == "true"'

build:ws:
  stage: build ws
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/ws:$ONEC_VERSION
  script:
    - docker build --build-arg ONEC_USERNAME=$ONEC_USERNAME --build-arg ONEC_PASSWORD=$ONEC_PASSWORD --build-arg ONEC_VERSION=$ONEC_VERSION --pull -t $CONTAINER_TEST_IMAGE -f ws/Dockerfile .
    - docker push $CONTAINER_TEST_IMAGE
  rules:
    - if: '$INSTALLER_TYPE == "ws"'
    - if: '$BUILD_ALL == "true"'

build:jdk:
  stage: build jdk
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/jdk:$ONEC_VERSION
  script:
    - docker build --build-arg DOCKER_USERNAME=$DOCKER_USERNAME --build-arg BASE_IMAGE=client-vnc --build-arg BASE_TAG=$ONEC_VERSION --build-arg OPENJDK_VERSION=14 --pull -t $CONTAINER_TEST_IMAGE -f jdk/Dockerfile .
    - docker push $CONTAINER_TEST_IMAGE
  rules:
    - if: '$INSTALLER_TYPE == "jdk"'
    - if: '$INSTALLER_TYPE == "edt"'
    - if: '$BUILD_ALL == "true"'

build:edt:
  stage: build edt
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/edt:$ONEC_VERSION
  script:
    - docker build --build-arg DOCKER_USERNAME=$DOCKER_USERNAME --build-arg ONEC_USERNAME=$ONEC_USERNAME --build-arg ONEC_PASSWORD=$ONEC_PASSWORD --build-arg BASE_IMAGE=jdk --build-arg BASE_TAG=$ONEC_VERSION --build-arg EDT_VERSION=2020.5 --pull -t $CONTAINER_TEST_IMAGE -f edt/Dockerfile .
    - docker push $CONTAINER_TEST_IMAGE
  rules:
    - if: '$INSTALLER_TYPE == "edt"'
    - if: '$BUILD_ALL == "true"'

build:crs:
  stage: build crs
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/crs:$ONEC_VERSION
  script:
    - docker build --build-arg ONEC_USERNAME=$ONEC_USERNAME --build-arg ONEC_PASSWORD=$ONEC_PASSWORD --build-arg ONEC_VERSION=$ONEC_VERSION --pull -t $CONTAINER_TEST_IMAGE -f crs/Dockerfile .
    - docker push $CONTAINER_TEST_IMAGE
  rules:
    - if: '$INSTALLER_TYPE == "crs"'
    - if: '$BUILD_ALL == "true"'

build:crs-http:
  stage: build crs-http
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/crs-http:$ONEC_VERSION
  script:
    - docker build --build-arg ONEC_VERSION=$ONEC_VERSION --build-arg DOCKER_USERNAME=$DOCKER_USERNAME --pull -t $CONTAINER_TEST_IMAGE -f crs-apache/Dockerfile .
    - docker push $CONTAINER_TEST_IMAGE
  rules:
    - if: '$INSTALLER_TYPE == "crs"'
    - if: '$INSTALLER_TYPE == "crs-http"'
    - if: '$BUILD_ALL == "true"'

build:client-oscript:
  stage: build client-oscript
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/client-oscript-$ONESCRIPT_VERSION:$ONEC_VERSION
  script:
    - docker build --build-arg DOCKER_USERNAME=$DOCKER_USERNAME --build-arg BASE_IMAGE=client-vnc --build-arg BASE_TAG=$ONEC_VERSION --build-arg ONESCRIPT_VERSION=$ONESCRIPT_VERSION --pull -t $CONTAINER_TEST_IMAGE -f oscript/Dockerfile .
    - docker push $CONTAINER_TEST_IMAGE
  rules:
    - if: '$INSTALLER_TYPE == "oscript"'
    - if: '$BUILD_ALL == "true"'

build:client-vnc-vas:
  stage: build client-vnc-vas
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/client-vnc-vas:$ONEC_VERSION
  script:
    - docker build --build-arg ONEC_USERNAME=$ONEC_USERNAME --build-arg ONEC_PASSWORD=$ONEC_PASSWORD --build-arg ONEC_VERSION=$ONEC_VERSION --build-arg VAS_VERSION=1.2.025 --target client-vnc-vas --pull -t $CONTAINER_TEST_IMAGE -f client/Dockerfile .
    - docker push $CONTAINER_TEST_IMAGE
  rules:
    - if: '$INSTALLER_TYPE == "tests"'
    - if: '$BUILD_ALL == "true"'

build:runner:
  stage: build runner
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/runner:$ONEC_VERSION
  script:
    - docker build --build-arg DOCKER_USERNAME=$DOCKER_USERNAME --build-arg BASE_IMAGE=client-oscript-$ONESCRIPT_VERSION --build-arg BASE_TAG=$ONEC_VERSION --build-arg RUNNER_VER=1.10.0 --pull -t $CONTAINER_TEST_IMAGE -f vanessa-runner/Dockerfile .
    - docker push $CONTAINER_TEST_IMAGE
  rules:
    - if: '$INSTALLER_TYPE == "runner"'
    - if: '$BUILD_ALL == "true"'

run:vnc:
  stage: test
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/client-vnc:$ONEC_VERSION
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker run --rm $CONTAINER_TEST_IMAGE bash -c "/opt/1C/v8.3/x86_64/1cv8 CREATEINFOBASE File=./build/db /DumpResult ./build/create.log"
  rules:
    - if: '$INSTALLER_TYPE == "client"'
    - if: '$INSTALLER_TYPE == "client-vnc"'
    - if: '$BUILD_ALL == "true"'

run:server:
  stage: test
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/server:$ONEC_VERSION
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker run --rm $CONTAINER_TEST_IMAGE bash -c ls /home/usr1cv8/.1cv8
  rules:
    - if: '$INSTALLER_TYPE == "server"'
    - if: '$BUILD_ALL == "true"'

run:ws:
  stage: test
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/ws:$ONEC_VERSION
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker run --rm $CONTAINER_TEST_IMAGE bash -c cd /home/www
  rules:
    - if: '$INSTALLER_TYPE == "ws"'
    - if: '$BUILD_ALL == "true"'

run:jdk:
  stage: test
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/jdk:$ONEC_VERSION
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker run --rm $CONTAINER_TEST_IMAGE java -version
  rules:
    - if: '$INSTALLER_TYPE == "jdk"'
    - if: '$INSTALLER_TYPE == "edt"'
    - if: '$BUILD_ALL == "true"'

run:edt:
  stage: test
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/edt:$ONEC_VERSION
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker run --rm $CONTAINER_TEST_IMAGE bash -c ring help
  rules:
    - if: '$INSTALLER_TYPE == "edt"'
    - if: '$BUILD_ALL == "true"'

run:crs:
  stage: test
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/crs:$ONEC_VERSION
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker run --rm $CONTAINER_TEST_IMAGE ls /home/usr1cv8/.1cv8
  rules:
    - if: '$INSTALLER_TYPE == "crs"'
    - if: '$BUILD_ALL == "true"'

run:crs-http:
  stage: test
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/crs-http:$ONEC_VERSION
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker run --rm -d --name=test_$CI_COMMIT_SHORT_SHA $CONTAINER_TEST_IMAGE
    - docker stop test_$CI_COMMIT_SHORT_SHA
  rules:
    - if: '$INSTALLER_TYPE == "crs"'
    - if: '$INSTALLER_TYPE == "crs-http"'
    - if: '$BUILD_ALL == "true"'

run:client-oscript:
  stage: test
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/client-oscript-$ONESCRIPT_VERSION:$ONEC_VERSION
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker run --rm $CONTAINER_TEST_IMAGE oscript -version
  rules:
    - if: '$INSTALLER_TYPE == "oscript"'
    - if: '$BUILD_ALL == "true"'

run:client-vnc-vas:
  stage: test
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/client-vnc-vas:$ONEC_VERSION
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker run --rm $CONTAINER_TEST_IMAGE bash -c "if [ -f /usr/lib/vanessa-automation-single.epf ]; then exit 0; else exit 1; fi"
  rules:
    - if: '$INSTALLER_TYPE == "tests"'
    - if: '$BUILD_ALL == "true"'

push:client:
  stage: release
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/client:$ONEC_VERSION
    CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE/client:latest
  <<: *common_release

push:vnc:
  stage: release
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/client-vnc:$ONEC_VERSION
    CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE/client-vnc:latest
  <<: *common_release

push:server:
  stage: release
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/server:$ONEC_VERSION
    CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE/server:latest
  <<: *common_release

push:ws:
  stage: release
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/ws:$ONEC_VERSION
    CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE/ws:latest
  <<: *common_release

push:jdk:
  stage: release
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/jdk:$ONEC_VERSION
    CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE/jdk:latest
  <<: *common_release

push:edt:
  stage: release
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/edt:$ONEC_VERSION
    CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE/edt:latest
  <<: *common_release

push:crs:
  stage: release
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/crs:$ONEC_VERSION
    CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE/crs:latest
  <<: *common_release

push:crs-http:
  stage: release
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/crs-http:$ONEC_VERSION
    CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE/crs-http:latest
  <<: *common_release

push:client-oscript:
  stage: release
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/client-oscript-$ONESCRIPT_VERSION:$ONEC_VERSION
    CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE/client-oscript-$ONESCRIPT_VERSION:latest
  <<: *common_release

push:client-vnc-vas:
  stage: release
  variables:
    CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/client-vnc-vas:$ONEC_VERSION
    CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE/client-vnc-vas:latest
  <<: *common_release
